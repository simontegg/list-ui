{
  "name": "geval",
  "version": "2.1.1",
  "description": "An implementation of an event",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/geval.git"
  },
  "homepage": "https://github.com/Raynos/geval",
  "main": "source.js",
  "contributors": [
    {
      "name": "Raynos"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/geval/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {},
  "devDependencies": {
    "tape": "~2.3.2",
    "process": "~0.5.2",
    "browserify": "~3.18.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/geval/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "node ./test/index.js",
    "start": "node ./index.js",
    "watch": "nodemon -w ./index.js index.js",
    "travis-test": "istanbul cover ./test/index.js && ((cat coverage/lcov.info | coveralls) || exit 0)",
    "cover": "istanbul cover --report none --print detail ./test/index.js",
    "view-cover": "istanbul report html && google-chrome ./coverage/index.html",
    "test-browser": "testem-browser ./test/browser/index.js",
    "testem": "testem-both -b=./test/browser/index.js"
  },
  "testling": {
    "files": "test/index.js",
    "browsers": [
      "ie/8..latest",
      "firefox/16..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# geval\n\n[![build status][1]][2]\n[![NPM version][3]][4]\n[![Coverage Status][5]][6]\n[![Davis Dependency status][9]][10]\n\n[![browser support][11]][12]\n\nAn implementation of an event\n\n## Example\n\n```js\nvar Event = require(\"geval\")\nvar document = require(\"global/document\")\n\nvar clicks = Event(function (broadcast) {\n    document.addEventListener(\"click\", function (ev) {\n        broadcast(ev)\n    })\n})\n\nvar removeListener = clicks(function listener(ev) {\n    console.log('click happened', ev)\n})\n\n// later you can call `removeListener()` to stop listening to events\n```\n\n## What about [`dominictarr/observable`](https://github.com/dominictarr/observable) ?\n\nBoth `geval` and `observable` having a similar interface.\n\n - `thing(function (ev) { ... })` listens for new values.\n\nThe main difference is that `geval` is an `Event`. For discrete \n  events it doesn't make sense to call `thing()` to get the\n  current state. Events do not have a notion of current state.\n\nSo the `\"click\"` event doesn't have a `.get()` method because\n  clicks do not have a notion of current state that makes sense\n\nHowever you should not make an `Event` of the windows current\n  width & height. You should make an `observable` instead which\n  internally listens on the `\"resize\"` event and sets the correct\n  new width & height.\n\n## Motivation\n\nEventEmitter's are complex. They are multiplexed events by default\n\n`Event` is the simpler version of an `EventEmitter`\n\nThe main differences are:\n  \n  - just one event.\n  - no implicit string based events\n  - forces explicit interfaces with named properties that are\n      `Event`'s\n  - no inheritance, you don't have to inherit from `Event` like\n      you have to inherit from `EventEmitter`.\n  - `Event` interface only has public listening functionality,\n      this gives a clear seperation between broadcast and listen\n\nInstead of something like\n\n```js\nvar EventEmitter = require('events').EventEmitter\n\nvar stream = new EventEmitter()\n\nstream.on('data', onData)\nstream.on('end', onEnd)\nstream.on('close', onClose)\n```\n\nyou can do:\n\n```js\nvar Event = require('geval')\n\nvar stream = {\n  ondata: Event(function () { ... }),\n  onend: Event(function () { ... }),\n  onclose: Event(function () { ... })\n}\n\nstream.ondata(onData)\nstream.onend(onEnd)\nstream.onclose(onClose)\n```\n\nHere the benefits are:\n\n - `stream` is an object of your shape and choice, you can call\n      the properties whatever you want. the `[[Prototype]]` can\n      be whatever you want.\n - `stream` has three well named properties that can be inspected\n      statically or at run time which means the consumer knows\n      exactly what type of events are available.\n - A consumer of `stream` could pass the `ondata` event to \n      another object or module without also passing all other\n      events along.\n - the `ondata` event is a concrete value. This allows for\n      calling higher order functions on the value and enables\n      various types of reactive programming techniques. \n - there are no special `\"error\"` semantics. There is no magic\n      integration with `domain` or `\"uncaughtException\"`.\n - there is no public `emit()` function on the `stream` interface\n      It's impossible for the consumer to emit events that it\n      should not be emitting, you know that all events that \n      come out of `ondata` are coming from the actual `stream`\n      implementation.\n\n## Docs\n\n### `var removeListener = ev(function listener(value) {})`\n\n```js\nvar Event = require(\"geval\")\n\nvar ev = Event(...)\n\nvar removeListener = ev(function listener(value) {\n  /* do something with the event value */\n})\n\n// call `removeListener()` when you are done with the `ev`.\n```\n\nA concrete `ev` is a function which you can pass a `listener`\n  to. The `listener` you pass to `ev` will be called with\n  an `value` each time an event occurs.\n\nWhen calling `ev` with a `listener` it will return a \n  `removeListener` function. You can call `removeListener` to\n  remove your `listener` function from the event. After you call\n  it your listener function will not be called with any future\n  values coming from the event.\n\n### `var ev = Event(function broadcaster(broadcast) {})`\n\n```js\nvar Event = require(\"geval\")\n\nvar ev = Event(function broadcaster(broadcast) {\n  /* call broadcast with a value */\n})\n```\n\n\n`Event` takes a broadcasting function and returns an `event`\n  function.\n\nThe `broadcasting` function takes one argument, the `broadcast`\n  function. The broadcaster can call `broadcast` each time it\n  wants to make an event occur. Each time you call `broadcast`\n  with a `value`, all listeners that are registered with `ev` \n  will be invoked with the `value`\n\n## Installation\n\n`npm install geval`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/geval.png\n  [2]: https://travis-ci.org/Raynos/geval\n  [3]: https://badge.fury.io/js/geval.png\n  [4]: https://badge.fury.io/js/geval\n  [5]: https://coveralls.io/repos/Raynos/geval/badge.png\n  [6]: https://coveralls.io/r/Raynos/geval\n  [7]: https://gemnasium.com/Raynos/geval.png\n  [8]: https://gemnasium.com/Raynos/geval\n  [9]: https://david-dm.org/Raynos/geval.png\n  [10]: https://david-dm.org/Raynos/geval\n  [11]: https://ci.testling.com/Raynos/geval.png\n  [12]: https://ci.testling.com/Raynos/geval\n",
  "readmeFilename": "README.md",
  "_id": "geval@2.1.1",
  "_shasum": "860fa2bfa6100e746a844e99268ef133cd019a06",
  "_from": "geval@^2.1.1",
  "_resolved": "https://registry.npmjs.org/geval/-/geval-2.1.1.tgz"
}
