{
  "name": "mercury",
  "version": "6.0.1",
  "description": "A truly modular frontend framework",
  "keywords": [
    "framework",
    "frontend",
    "virtual",
    "react",
    "modular",
    "web"
  ],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/mercury.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/mercury",
  "contributors": [
    {
      "name": "Raynos"
    },
    {
      "name": "Matt-Esch"
    },
    {
      "name": "neonstalwart"
    },
    {
      "name": "parshap"
    },
    {
      "name": "nrw"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/mercury/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "dom-delegator": "^9.0.0",
    "geval": "^2.1.1",
    "main-loop": "^2.3.0",
    "node-hook": "^0.1.0",
    "observ": "^0.2.0",
    "observ-array": "^1.0.3",
    "observ-struct": "^4.1.0",
    "observ-varhash": "^0.1.3",
    "value-event": "^2.1.0",
    "vdom": "0.0.16",
    "vdom-thunk": "^3.0.0",
    "virtual-hyperscript": "^4.4.0",
    "vtree": "0.0.16"
  },
  "devDependencies": {
    "backbone": "^1.1.2",
    "browserify": "^3.38.0",
    "callify": "^0.2.0",
    "coveralls": "^2.11.1",
    "cuid": "^1.2.1",
    "function-bind": "^0.1.0",
    "global": "^4.2.1",
    "hash-router": "^0.4.0",
    "indexhtmlify": "git://github.com/Raynos/indexhtmlify#v1.1.1-module2",
    "istanbul": "^0.2.16",
    "javascript-editor": "^0.2.1",
    "jshint": "^2.5.0",
    "json-globals": "^0.2.1",
    "marked": "^0.3.2",
    "mercury-jsxify": "^0.14.0",
    "min-document": "^2.9.0",
    "next-tick": "^0.2.2",
    "pre-commit": "0.0.7",
    "process": "^0.7.0",
    "raf": "^2.0.1",
    "rcss": "git://github.com/chenglou/rcss#424fc1ac17cdc2860736f73722e8135be96e1ba6",
    "require-modify": "^0.1.0",
    "rimraf": "^2.2.8",
    "routes-router": "^1.5.4",
    "run-browser": "^1.3.1",
    "run-parallel": "^1.0.0",
    "run-series": "^1.0.2",
    "st": "^0.4.1",
    "synthetic-dom-events": "git://github.com/Raynos/synthetic-dom-events",
    "tap-spec": "^0.2.0",
    "tape": "^2.13.2",
    "valid-email": "0.0.1",
    "vdom-virtualize": "0.0.1",
    "virtual-dom-stringify": "^0.2.0",
    "vtree-select": "^1.0.1",
    "xtend": "^3.0.0",
    "zuul": "^1.9.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/mercury/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "jshint": "jshint . --verbose",
    "disc": "browserify index.js --full-paths | discify > disc.html && xdg-open disc.html",
    "test": "node test/index.js | tap-spec",
    "travis-test": "npm run phantom && npm run cover && istanbul report lcov && ((cat coverage/lcov.info | coveralls) || exit 0) && zuul -- test/index.js",
    "phantom": "run-browser test/index.js -b | tap-spec",
    "browser": "run-browser test/index.js",
    "cover": "istanbul cover --report html --print detail ./test/index.js",
    "view-cover": "istanbul report html && google-chrome ./coverage/index.html",
    "build": "node bin/build.js",
    "examples": "node bin/example-server.js",
    "dist": "node bin/dist.js",
    "dist-publish": "npm run dist && git add dist/mercury.js && git commit -m 'dist' && npm publish"
  },
  "testling": {
    "files": "test/index.js",
    "browsers": [
      "ie/9..latest",
      "firefox/26..latest",
      "firefox/nightly",
      "chrome/31..latest",
      "chrome/canary",
      "opera/18..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# mercury\n\n[![build status][1]][2]\n[![NPM version][3]][4]\n[![Coverage Status][5]][6]\n[![Davis Dependency status][9]][10]\n\n<!-- [![browser support][11]][12] -->\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/raynos.svg)](https://saucelabs.com/u/raynos)\n\nA truly modular frontend framework\n\nTo understand what I mean by truly modular just [read the source](https://github.com/Raynos/mercury/blob/master/index.js)\n\n## Examples\n\n### Hello world\n\n```js\nvar mercury = require(\"mercury\")\nvar h = mercury.h\n\nvar clicks = mercury.input()\nvar clickCount = mercury.value(0)\n\nclicks(function () {\n    clickCount.set(clickCount() + 1)\n})\n\nfunction render(clickCount) {\n    return h(\"div.counter\", [\n        \"The state \", h(\"code\", \"clickCount\"),\n        \" has value: \" + clickCount + \".\", h(\"input.button\", {\n            type: \"button\",\n            value: \"Click me!\",\n            \"ev-click\": mercury.event(clicks)\n        })\n    ])\n}\n\nmercury.app(document.body, clickCount, render)\n```\n\n### Basic Examples\n\n - [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=1156430c25a28cd8cfe1) [count](examples/count.js)\n - [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=e11f95b67ff92808eed0) [shared-state](examples/shared-state.js)\n - [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=6f286fc3641dbd199206) [field-reset](examples/field-reset.js)\n - [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=3752124345d5dbd8cccb) [bmi-counter](examples/bmi-counter.js)\n - [![view on requirebin](http://requirebin.com/badge.png)](http://requirebin.com/?gist=fb9c8a1938ab9d536879) [canvas](examples/canvas.js)\n\n### Intermediate Examples\n\n - [TodoMVC](examples/todomvc)\n - [markdown editor](examples/markdown)\n - [number-input](examples/number-input)\n - [2048 (wip)](https://github.com/Raynos/mercury/tree/2048-wip/examples/2048)\n - [github issues (wip)](https://github.com/Raynos/mercury/tree/github-issues/examples/github-issues-viewer)\n - [serverside rendering (wip)](https://github.com/Raynos/mercury/tree/server-rendering/examples/server-rendering)\n\n### Unidirectional examples\n\nThe following examples demonstrate how you can mix & match\n  mercury with other frameworks. This is possible because mercury\n  is fundamentally modular.\n\n**Disclaimer:** The following are neither \"good\" nor \"bad\" ideas.\n  Your milage may vary on using these ideas\n\n - [Backbone + Mercury](examples/unidirectional/backbone)\n - [JSX + Mercury](examples/unidirectional/jsx)\n\n## Motivation\n\n### Mercury vs React\n\n`mercury` is similar to react, however it's larger in scope, \n  it is better compared against [`om`][om] or \n  [`quiescent`][quiescent]\n  \n - mercury leverages [`virtual-dom`][virtual-dom] which uses \n    an immutable vdom structure\n - mercury comes with [`observ-struct`][observ-struct] which uses \n    immutable data for your state atom\n - mercury is truly modular, you can trivially swap out \n    subsets of it for other modules\n - mercury source code itself is maintainable, the modules it \n    uses are all small, well tested and well documented.\n    you should not be afraid to use mercury in production \n    as it's easy to maintain & fix.\n - mercury encourages zero dom manipulation in your application code. As far as your application is concerned\n    elements do not exist. This means you don't need to reference DOM elements when rendering or when handling\n    events\n - mercury is compact, it's 11kb min.gzip.js, that's smaller than backbone.\n - mercury strongly encourages FRP techniques and discourages local mutable state.\n - mercury is highly performant, it's faster then React / Om / ember+htmlbars in multiple benchmarks\n    [TodoMVC benchmark](http://matt-esch.github.io/mercury-perf/)\\\n    [animation benchmark](http://jsfiddle.net/sVPQL/11/) \n    [TodoMVC benchmark source](https://github.com/matt-esch/mercury-perf)\n - mercury comes with FP features like time-travel / easy undo out of the box.\n - mercury is lean, it's an weekend's read at 2.5kloc. (virtual-dom is 1.1kloc, an evening's read.)\n    compared to react which is almost 20kloc (a month's read)\n\n## Modules\n\n`mercury` is a small glue layer that composes a set of modules\n  that solves a subset of the frontend problem.\n\nIf `mercury` is not ideal for your needs, you should check out\n  the individual modules and see if you can re-use something.\n\nAlternatively if the default set of modules in `mercury` doesn't\n  work for you, you can just require other modules. It's possible\n  to for example, swap out [`vtree`][vtree] with\n  [`react`][react] or swap out [`observ-struct`][observ-struct]\n  with [`backbone`][backbone]\n\n### Input, State, Render and Output\n\nThere are three pieces to mercury, Input (Controller),\n  State (Model) and Render (View).\n\nIn a normal mercury app you define your top level Input which\n  is a finite list of events.\n\nYou then define your top level state \"atom\". Generally you want\n  a large fat state object for your entire application. We then\n  wire all the events in Input up to some updating logic, i.e.\n  every time an event occurs in Input we do some logic and then\n  update the State.\n\nFinally we define our Rendering logic as a single function\n  that takes the entire state of our application and returns a\n  virtual DOM representation of our UI. Every time the state\n  changes we just call render and then update the DOM.\n\nYou may also need Output for your application, if we want to \n  have some other side effect other then updating the UI, like\n  sending a HTTP POST or writing to a websocket or persisting\n  to indexedDB. Then we generally listen to changes in the state\n  and have our side effect. Note that Render is just a specific \n  subset of the Output of your application.\n\n### Rendering modules (The view layer)\n\nFor the view layer mercury uses a set of modules that come\n  together and make it easy to work with a Virtual DOM.\n\nIn `mercury` the view is just a function that takes your \n  application state and returns a virtual DOM representation.\n  This makes writing your view really easy, you just write it\n  top to bottom.\n\n`mercury` then uses the following modules to make it really\n  performant to use the virtual DOM to update the real DOM.\n\n#### [`vtree`][vtree]\n\n[`vtree`][vtree] is the module that contains the data \n  structures for the virtual DOM. These are the primitive \n  objects and values that the rendering functions in a \n  mercury app will return.\n\n[`vtree`][vtree] also contains the diffing algorithm used in \n  `mercury`. Mercury uses a diffing algorithm on a virtual DOM \n  to compute a minimal set of `VPatch` records that it can apply to the DOM.\n\n#### [`vdom`][vdom]\n\n[`vdom`][vdom] is the module that contains the `create` and \n  `patch` algorithm for turning the `vtree` data structures \n  into real DOM objects.\n\n[`vdom/create-element`][vdom-create-element] is used to turn a \n  virtual DOM into a real DOM. this is used for the initial \n  rendering of your app.\n\n[`vdom/patch`][vdom-patch] is used to apply a series of `VPatch` \n  records to a real DOM element.\n\nYou can also use [`vdom`][vdom] and \n  [`min-document`][min-document] together on the server to \n  generate HTML strings. [`min-document`][min-document] is a \n  minimal fake DOM for use on the server, you can pass \n  [`vdom`][vdom] any `document` you want. In this case \n  [`min-document`][min-document] contains the logic to convert \n  its fake DOM into a HTML string.\n\n#### [`virtual-hyperscript`][virtual-hyperscript]\n\n[`virtual-hyperscript`][virtual-hyperscript] is a module that \n  makes it easier to create `VTree` nodes. It basically exports \n  a `h()` function that creates a DSL similar to `jade` \n  (just more brackets ;)).\n\n[`virtual-hyperscript`][virtual-hyperscript] allows you to write \n  your views in an expressive manner.\n\n#### [`vdom-thunk`][vdom-thunk]\n\n[`vdom-thunk`][vdom-thunk] is a module that increases the \n  performance of building applications with a virtual DOM \n  system. One of the important parts of using a virtual DOM \n  and functional programming in general is to make extensive \n  use of caching.\n\nYou can use [`vdom-thunk`][vdom-thunk] to effectively memoize a \n  function that returns a virtual DOM node. This means if you \n  call it twice with the same arguments it will not re-evaluate \n  the function.\n\nThis basically means you only have to render that which has \n  changed instead of rendering the entire virtual tree of your\n  application.\n\nIt should be noted that [`vdom-thunk`][vdom-thunk] assumes \n  arguments are immutable and thus does an O(1) `===` check \n  to see whether the arguments has changed. This will only \n  work if your state is immutable. Thankfully, \n  [`observ-struct`][observ-struct] is immutable\n\n#### [`main-loop`][main-loop]\n\n[`main-loop`][main-loop] is another optimization module for a \n  virtual DOM system. Normally you would re-create the virtual \n  tree every time your state changes. This is not optimum, \n  with [`main-loop`][main-loop] you will only update your \n  virtual tree at most once per request animation frame.\n\n[`main-loop`][main-loop] basically gives you batching of your \n  virtual DOM changes, which means if you change your model \n  multiple times it will be rendered once asynchronously on \n  the next request animation frame.\n\n### State modules (The model layer)\n\nIn `mercury` we use immutable data structure primitives to\n  represent our model. Using immutable data structures allows\n  you to use the [`vdom-thunk`][vdom-thunk] optimization.\n\n`mercury` uses an observable state representation so that you\n  can be notified of any changes.\n\nGenerally applications built with mercury will have a single\n  top level state \"atom\". i.e. there is one large state object\n  for your application and child components do not have local or\n  hidden state. However we can directly embed the state of a\n  child component in our top level state \"atom\" to achieve \n  composition.\n\n#### [`observ`][observ]\n\n[`observ`][observ] is the data structure used for observable \n  data. It allows you to create a value for which you can \n  listen for changes.\n\n[`observ`][observ] also comes with higher order functions \n  like [`observ/computed`][observ-computed] that can be used to \n  create new dependent observables. Generally these computed \n  observables cannot be directly mutated but instead change \n  when they data they rely on changes.\n\n[`observ`][observ] is basically an implementation of the \n  `Signal` type that is normally used in FRP.\n\n#### [`observ-struct`][observ-struct]\n\n[`observ-struct`][observ-struct] is an observable that contains an \n  object with a fixed number of keys. Generally the key-value \n  pairs in [`observ-struct`][observ-struct] are themselves \n  observables. You can change the value of any key in an \n  [`observ-struct`][observ-struct] and the top level object \n  will also change to be a new object with that key changed.\n\n[`observ-struct`][observ-struct] uses shallow extension to ensure \n  that every time the struct changes you get a fresh immutable \n  object.\n\n#### [`observ-array`][observ-array]\n\n[`observ-array`][observ-array] is an observable that contains \n  an array of observables. It's generally recommended that this a\n  heterogeneous array. You can change the value of any item in\n  the array and the top level array will also change to be a \n  new array.\n\n[`observ-array`][observ-array] uses shallow extension to ensure \n  that every time the array changes (an item changes or an \n  item is added or removed) you get a fresh immutable array.\n\n[`observ-array`][observ-array] has the benefit of being able \n  to add or remove items from the array, where as \n  [`observ-struct`][observ-struct] has a fixed number\n  of keys and you cannot add more keys to an \n  [`observ-struct`][observ-struct]\n\n### Input modules (The controller layer)\n\nIn `mercury` we model all the inputs to our application\n  explicitly. We define an input object that contains a bunch of\n  [`geval`][geval] Event instances.\n\nSomewhere else in our application we listen to the Input and\n  run some logic and update our state when an event happens.\n\n#### [`geval`][geval]\n\n[`geval`][geval] is our data structure for Events. it gives us \n  a way of listening to events and a way of publishing them.\n\nMost of the time you will either create a computed Event that\n  emits events based on some raw source, like winddow scroll\n  events or a websocket. Or you can create a mutable Event which\n  you pass to the UI renderer so it can emit events for dynamically\n  created UI components.\n\n[`geval`][geval] is basically an implementation of the \n  `Event` type that is normally used in FRP.\n\n#### [`dom-delegator`][dom-delegator]\n\n[`dom-delegator`][dom-delegator] is an event delegator that \n  allows you to seperate your event listeners from your \n  event emitters. It sets up global event listeners and \n  allow you to embed event handlers on your virtual DOM \n  elements without having to manage adding or removing \n  actual event listeners.\n\n#### [`value-event`][value-event]\n\n[`value-event`][value-event] allows you to create event \n  handlers that you can embed in a virtual DOM. \n  These event handlers work with both the native DOM and \n  [`dom-delegator`][dom-delegator].\n\n[`value-event`][value-event] contains a set of higher order \n  functions that allows you to write to a value to a \n  [`geval`][geval] Event when some user interaction occurs.\n\nUsing the higher order functions defined in \n  [`value-event`][value-event] (change, submit, etc. ) \n  allows you to not have to write any DOM event handling \n  code in your application. [`value-event`][value-event]\n  takes care of all the reading from the DOM.\n\n## Documentation\n\n### FAQ\n\nSee the [FAQ document](docs/faq.md)\n\n### API\n\nWIP. In lieu of documentation please see examples :(\n\n## Installation\n\n`npm install mercury`\n\n## Development\n\nIf you want to develop on `mercury` you can clone the code\n\n```sh\ngit clone git@github.com:Raynos/mercury\ncd mercury\nnpm install\nnpm test\n```\n\n### npm run tasks\n\n - `npm test` runs the tests\n - `npm run jshint` will run jshint on the code\n - `npm run disc` will open discify (if globally installed)\n - `npm run build` will build the html assets for gh-pages\n - `npm run examples` will start a HTTP server that shows examples\n - `npm run dist` will create a distributed version of mercury\n\n## Inspirations\n\nA lot of the philosophy and design of `mercury` is inspired by\n  the following:\n\n - [`react`][react] for documenting and explaining the concept\n    of a virtual DOM and its diffing algorithm\n - [`om`][om] for explaining the concept and benefits of\n    immutable state and time travel.\n - [`elm`][elm] for explaining the concept of FRP and having a\n    reference implementation of FRP in JavaScript. I wrote a \n    pre-cursor to `mercury` that was literally a \n    re-implementation of [`elm`][elm] in javascript \n    ([`graphics`][graphics])\n - [`reflex`][reflex] for demonstrating the techniques used to\n    implement dynamic inputs.\n\n## Contributors\n\n - Raynos\n - Matt-Esch\n - neonstalwart\n - parshap\n - nrw\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/mercury.svg\n  [2]: https://travis-ci.org/Raynos/mercury\n  [3]: https://badge.fury.io/js/mercury.svg\n  [4]: https://badge.fury.io/js/mercury\n  [5]: http://img.shields.io/coveralls/Raynos/mercury.svg\n  [6]: https://coveralls.io/r/Raynos/mercury\n  [7]: https://gemnasium.com/Raynos/mercury.png\n  [8]: https://gemnasium.com/Raynos/mercury\n  [9]: https://david-dm.org/Raynos/mercury.svg\n  [10]: https://david-dm.org/Raynos/mercury\n  [11]: https://ci.testling.com/Raynos/mercury.png\n  [12]: https://ci.testling.com/Raynos/mercury\n  \n  [graphics]: https://github.com/Raynos/graphics\n  [elm]: https://github.com/elm-lang/Elm\n  [react]: https://github.com/facebook/react\n  [om]: https://github.com/swannodette/om\n  [reflex]: https://github.com/Gozala/reflex\n  [backbone]: https://github.com/jashkenas/backbone\n  [quiescent]: https://github.com/levand/quiescent\n  [virtual-dom]: https://github.com/Matt-Esch/virtual-dom\n\n  [vtree]: https://github.com/Matt-Esch/vtree\n  [vdom]: https://github.com/Matt-Esch/vdom\n  [vdom-create-element]: https://github.com/Matt-Esch/vdom/blob/master/create-element.js\n  [vdom-patch]: https://github.com/Matt-Esch/vdom/blob/master/patch.js\n  [min-document]: https://github.com/Raynos/min-document\n  [virtual-hyperscript]: https://github.com/Raynos/virtual-hyperscript\n  [main-loop]: https://github.com/Raynos/main-loop\n  [vdom-thunk]: https://github.com/Raynos/vdom-thunk\n  [observ]: https://github.com/Raynos/observ\n  [observ-computed]: https://github.com/Raynos/observ/blob/master/computed.js\n  [observ-struct]: https://github.com/Raynos/observ-struct\n  [observ-array]: https://github.com/Raynos/observ-array\n  [geval]: https://github.com/Raynos/geval\n  [dom-delegator]: https://github.com/Raynos/dom-delegator\n  [value-event]: https://github.com/Raynos/value-event\n",
  "readmeFilename": "README.md",
  "_id": "mercury@6.0.1",
  "_shasum": "48ff70b08b39f252957d54bd6f1de018c391ae3f",
  "_from": "mercury@^6.0.1",
  "_resolved": "https://registry.npmjs.org/mercury/-/mercury-6.0.1.tgz"
}
