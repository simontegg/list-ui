{
  "name": "observ-ndarray",
  "version": "0.2.2",
  "description": "An ndarray containing observable values",
  "main": "index.js",
  "scripts": {
    "test": "tape test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ahdinosaur/observ-ndarray"
  },
  "keywords": [
    "ndarray",
    "observ",
    "observable",
    "array"
  ],
  "author": {
    "name": "ahdinosaur"
  },
  "license": "AGPLv3",
  "bugs": {
    "url": "https://github.com/ahdinosaur/observ-ndarray/issues"
  },
  "homepage": "https://github.com/ahdinosaur/observ-ndarray",
  "dependencies": {
    "isndarray": "^0.1.0",
    "ndarray": "^1.0.15",
    "observ": "^0.2.0"
  },
  "devDependencies": {
    "tape": "^2.13.4"
  },
  "readme": "# observ-ndarray\n\nan [ndarray](http://npmjs.org/ndarray) containing observable values\n\n### WORK IN PROGRESS\n\n## example\n\nan `ObservNdarray` is an observable version of an [ndarray](http://npmjs.org/ndarray), every mutation of the array or mutation of an observable element in the array will cause the `ObservNdarray` to emit a new changed [ndarray](http://npmjs.org/ndarray).\n\n```\nvar ObservStruct = require('observ-struct');\nvar ObservNdarray = require('observ-ndarray');\nvar Observ = require('observ');\nvar Ndarray = require('ndarray');\nvar rgbHex = require('rgb-hex');\nvar kuler = require('kuler');\n\nfunction createPixel (red, green, blue) {\n  return ObservStruct({\n    red: Observ(red),\n    green: Observ(green),\n    blue: Observ(blue),\n  });\n}\n\nvar state = ObservStruct({\n  grid: ObservNdarray(new Ndarray([\n    createPixel(255, 0, 0),\n    createPixel(0, 255, 0),\n    createPixel(0, 0, 255),\n    createPixel(0, 255, 255),\n    createPixel(255, 255, 0),\n    createPixel(255, 255, 255),\n    createPixel(255, 0, 0),\n    createPixel(0, 255, 0),\n    createPixel(0, 0, 255),\n  ], [3, 3])),\n});\n\nstate(function (currState) {\n  // currState.grid is an ndarray\n  // currState.grid.get(0, 0) is a plain object\n  for (var i = 0; i < currState.grid.shape[0]; i++) {\n    for (var j = 0; j < currState.grid.shape[1]; j++) {\n      var pixel = currState.grid.get(i, j);\n      var color = rgbHex(pixel.red, pixel.green, pixel.blue);\n      process.stdout.write(kuler('â€¢').style(color));\n    }\n    process.stdout.write('\\n');\n  }\n});\n\nstate.grid.get(0, 0).red.set(255);\nconsole.log(\"---\");\nstate.grid.get(0, 0).green.set(255);\nconsole.log(\"---\");\nstate.grid.get(0, 0).blue.set(255);\n```\n",
  "readmeFilename": "README.md",
  "_id": "observ-ndarray@0.2.2",
  "_shasum": "0c169cc070ba3455f1c75d2dde51c83e0653e321",
  "_from": "observ-ndarray@^0.2.0",
  "_resolved": "https://registry.npmjs.org/observ-ndarray/-/observ-ndarray-0.2.2.tgz"
}
